
        import java.net.URL;

        import java.net.*;
        import java.io.*;
    public void performRequest(TaskListener listener) {
        try {
            URL yahoo = new URL("https://www.google.com.ua");
            URLConnection yc = yahoo.openConnection();
            BufferedReader in = new BufferedReader(
                    new InputStreamReader(
                            yc.getInputStream()));
            String inputLine;

            while ((inputLine = in.readLine()) != null)
                listener.getLogger().println(inputLine);
            in.close();
        } catch (MalformedURLException name) {
        } catch (IOException name) {
        }
//        URL url = new URL("http://www.y.com/url");
//        InputStream is = url.openStream();
//        try {
//  /* Now read the retrieved document from the stream. */
//  ...
//        } finally {
//            is.close();
//        }retrieved
    }




<!--<f:optionalBlock title="Override credentials" field="overrideCredentials" checked="${instance.getOverrideCredentials() != null ? true : null}">-->
        <!--<j:set var="field" value="overrideCredentials" />-->
        <!--<j:set var="descriptor" value="${attrs.propertyDescriptor ?: app.getDescriptorOrDie(descriptor.getPropertyType(instance,field).clazz)}" />-->
        <!--<j:set var="instance" value="${instance[field]}" />-->
        <!--<st:include from="${descriptor}" page="${descriptor.configPage}" />-->
    <!--</f:optionalBlock>-->
    <!--<f:optionalBlock title="Override break options" field="overrideBreakOptions" checked="${instance.getOverrideBreakOptions() != null ? true : null}">-->
        <!--<j:set var="field" value="overrideBreakOptions" />-->
        <!--<j:set var="descriptor" value="${attrs.propertyDescriptor ?: app.getDescriptorOrDie(descriptor.getPropertyType(instance,field).clazz)}" />-->
        <!--<j:set var="instance" value="${instance[field]}" />-->
        <!--<st:include from="${descriptor}" page="${descriptor.configPage}" />-->
    <!--</f:optionalBlock>-->





    //
    ////            URI uri = new URIBuilder()
    ////                    .setScheme("http")
    ////                    .setHost("www.google.com")
    ////                    .setPath("/search")
    ////                    .setParameter("q", "httpclient")
    ////                    .setParameter("btnG", "Google Search")
    ////                    .setParameter("aq", "f")
    ////                    .setParameter("oq", "")
    ////                    .build();
    //
    ////            RequestConfig requestConfig = RequestConfig.custom()
    ////                    .setSocketTimeout(1000)
    ////                    .setConnectTimeout(1000)
    ////                    .build();
    ////
    ////            HttpGet httpget1 = new HttpGet("http://localhost/1");
    ////            httpget1.setConfig(requestConfig);
    //
    //            CloseableHttpClient httpClient = HttpClients.createDefault();
    //            HttpGet httpget = new HttpGet(credentials.getBaseUrl() + "url");
    //            httpget.addHeader("accept", "application/json");
    //
    ////            ResponseHandler<String> responseHandler = new ResponseHandler<String>() {
    ////                @Override
    ////                public String handleResponse(final HttpResponse response) throws ClientProtocolException, IOException {
    ////                    int status = response.getStatusLine().getStatusCode();
    ////                    if (status >= 200 && status < 300) {
    ////                        HttpEntity entity = response.getEntity();
    ////                        return entity != null ? EntityUtils.toString(entity) : null;
    ////                    } else {
    ////                        throw new ClientProtocolException("Unexpected response status: " + status);
    ////                    }
    ////                }
    //            };
    //
    //            ResponseHandler<MyJsonObject> responseHandler = new ResponseHandler<MyJsonObject>() {
    //                @Override
    //                public String handleResponse(final HttpResponse response) throws ClientProtocolException, IOException {
    //                    int status = response.getStatusLine().getStatusCode();
    //                    if (status >= 200 && status < 300) {
    //                        HttpEntity entity = response.getEntity();
    //
    //
    //
    //                        Gson gson = new GsonBuilder().create();
    //                        ContentType contentType = ContentType.getOrDefault(entity);
    //                        Charset charset = contentType.getCharset();
    //                        Reader reader = new InputStreamReader(entity.getContent(), charset);
    //                        return gson.fromJson(reader, MyJsonObject.class);
    //
    //
    //
    //                        return entity != null ? EntityUtils.toString(entity) : null;
    //                    } else {
    //                        throw new ClientProtocolException("Unexpected response status: " + status);
    //                    }
    //                }
    //            };
    //            String responseBody = httpclient.execute(httpget, responseHandler);
    //            return responseBody;
    //        } finally {
    //            httpClient.close();
    //        }
    //        return null;